levels(exp_designCav1)
head(exp_designCav1)
ddsCav1=DESeqDataSetFromMatrix(countData=Cav1PN4, colData=exp_designCav1, design=~condition)
ddsCav1=DESeq(ddsCav1)
resCav1= results(ddsCav1, alpha=0.05)
#for Cavin 2
exp_designCav2 = data.frame(row.names = colnames(Cav2PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav2$condition, "Test")
levels(exp_designCav2)
head(exp_designCav2)
ddsCav2=DESeqDataSetFromMatrix(countData=Cav2PN4, colData=exp_designCav2, design=~condition)
ddsCav2=DESeq(ddsCav2)
resCav2= results(ddsCav2, alpha=0.05)
#For Cavin3
exp_designCav3 = data.frame(row.names = colnames(Cav3PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav3$condition, "Test")
levels(exp_designCav3)
head(exp_designCav3)
ddsCav3=DESeqDataSetFromMatrix(countData=Cav3PN4, colData=exp_designCav3, design=~condition)
ddsCav3=DESeq(ddsCav3)
resCav3= results(ddsCav3, alpha=0.05)
#comparing the increase between cavins.
a<- resCav1$log2FoldChange
a1 = which(a>0)
aPADJ<- rownames(rawdata)[which(resCav1$padj<0.1)]
aSig= rownames(rawdata)[which(resCav1$pvalue<0.05)]
a<-rownames(rawdata)[a1]
b<- resCav2$log2FoldChange
b1 = which(b>0)
bPADJ<- rownames(rawdata)[which(resCav2$padj<0.1)]
b<-rownames(rawdata)[b1]
bSig= rownames(rawdata)[which(resCav2$pvalue<0.05)]
c<- resCav3$log2FoldChange
c1 = which(c>0)
c<-rownames(rawdata)[c1]
cPADJ<- rownames(rawdata)[which(resCav3$padj<0.1)]
cSig= rownames(rawdata)[which(resCav3$pvalue<0.05)]
Upregshared<- unique(c[c%in%a[a%in%b]])
Sig0.05<- unique(cSig[cSig%in%aSig[aSig%in%bSig]])
Sig0.05Upreg<- unique(Upregshared[Upregshared%in%Sig0.05])
aPADJ
getwd()
rawdata<- read.csv(file="miRNA_PC3_pellet_filtered.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(3,7, 11, 1, 5, 9)]
Cav1PN4= rawdata[c(2, 6, 10, 1, 5, 9)]
#CaveolinPN4= rawdata[c(3, 8, 13, 1, 5, 14)]
Cav3PN4= rawdata[c(4, 8, 12, 1, 5, 9)]
# Filtering and Normalization
# compute the effective library size by using TMM normalization
#Analysis for Cavin1
exp_designCav1 = data.frame(row.names = colnames(Cav1PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav1$condition, "Test")
levels(exp_designCav1)
head(exp_designCav1)
ddsCav1=DESeqDataSetFromMatrix(countData=Cav1PN4, colData=exp_designCav1, design=~condition)
ddsCav1=DESeq(ddsCav1)
resCav1= results(ddsCav1, alpha=0.05)
#for Cavin 2
exp_designCav2 = data.frame(row.names = colnames(Cav2PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav2$condition, "Test")
levels(exp_designCav2)
head(exp_designCav2)
ddsCav2=DESeqDataSetFromMatrix(countData=Cav2PN4, colData=exp_designCav2, design=~condition)
ddsCav2=DESeq(ddsCav2)
resCav2= results(ddsCav2, alpha=0.05)
#For Cavin3
exp_designCav3 = data.frame(row.names = colnames(Cav3PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav3$condition, "Test")
levels(exp_designCav3)
head(exp_designCav3)
ddsCav3=DESeqDataSetFromMatrix(countData=Cav3PN4, colData=exp_designCav3, design=~condition)
ddsCav3=DESeq(ddsCav3)
resCav3= results(ddsCav3, alpha=0.05)
#comparing the increase between cavins.
a<- resCav1$log2FoldChange
a1 = which(a>0)
aSig= rownames(rawdata)[which(resCav1$pvalue<0.05)]
aPADJ= rownames(rawdata)[which(resCav1$padj<0.1)]
a<-rownames(rawdata)[a1]
b<- resCav2$log2FoldChange
b1 = which(b>0)
b<-rownames(rawdata)[b1]
bSig= rownames(rawdata)[which(resCav2$pvalue<0.05)]
bPADJ<- rownames(rawdata)[which(resCav2$padj<0.1)]
c<- resCav3$log2FoldChange
c1 = which(c>0)
c<-rownames(rawdata)[c1]
cSig= rownames(rawdata)[which(resCav3$pvalue<0.05)]
cPADJ<- rownames(rawdata)[which(resCav3$padj<0.1)]
Upregshared<- unique(c[c%in%a[a%in%b]])
aPADJ
cPADJ
bPADJ
rawdata<- read.csv(file="miRNA_raw_counts_PC3_filtered.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(3,7, 11, 1, 5, 9)]
Cav1PN4= rawdata[c(2, 6, 10, 1, 5, 9)]
#CaveolinPN4= rawdata[c(3, 8, 13, 1, 5, 14)]
Cav3PN4= rawdata[c(4, 8, 12, 1, 5, 9)]
# Filtering and Normalization
# compute the effective library size by using TMM normalization
#Analysis for Cavin1
exp_designCav1 = data.frame(row.names = colnames(Cav1PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav1$condition, "Test")
levels(exp_designCav1)
head(exp_designCav1)
ddsCav1=DESeqDataSetFromMatrix(countData=Cav1PN4, colData=exp_designCav1, design=~condition)
ddsCav1=DESeq(ddsCav1)
resCav1= results(ddsCav1, alpha=0.05)
#for Cavin 2
exp_designCav2 = data.frame(row.names = colnames(Cav2PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav2$condition, "Test")
levels(exp_designCav2)
head(exp_designCav2)
ddsCav2=DESeqDataSetFromMatrix(countData=Cav2PN4, colData=exp_designCav2, design=~condition)
ddsCav2=DESeq(ddsCav2)
resCav2= results(ddsCav2, alpha=0.05)
#For Cavin3
exp_designCav3 = data.frame(row.names = colnames(Cav3PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav3$condition, "Test")
levels(exp_designCav3)
head(exp_designCav3)
ddsCav3=DESeqDataSetFromMatrix(countData=Cav3PN4, colData=exp_designCav3, design=~condition)
ddsCav3=DESeq(ddsCav3)
resCav3= results(ddsCav3, alpha=0.05)
#comparing the increase between cavins.
a<- resCav1$log2FoldChange
a1 = which(a>0)
aSig= rownames(rawdata)[which(resCav1$pvalue<0.05)]
aPADJ= rownames(rawdata)[which(resCav1$padj<0.1)]
a<-rownames(rawdata)[a1]
b<- resCav2$log2FoldChange
b1 = which(b>0)
b<-rownames(rawdata)[b1]
bSig= rownames(rawdata)[which(resCav2$pvalue<0.05)]
bPADJ<- rownames(rawdata)[which(resCav2$padj<0.1)]
c<- resCav3$log2FoldChange
c1 = which(c>0)
c<-rownames(rawdata)[c1]
cSig= rownames(rawdata)[which(resCav3$pvalue<0.05)]
cPADJ<- rownames(rawdata)[which(resCav3$padj<0.1)]
Upregshared<- unique(c[c%in%a[a%in%b]])
aPADJ
cPADJ
View(Cav1PN4)
View(Cav1PN4)
View(Cav3PN4)
View(Cav3PN4)
View(Cav2PN4)
View(Cav2PN4)
rawdata<- read.csv(file="miRNA_rc_PC3_filteredTake2.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(3,7, 11, 1, 5, 9)]
Cav1PN4= rawdata[c(2, 6, 10, 1, 5, 9)]
#CaveolinPN4= rawdata[c(3, 8, 13, 1, 5, 14)]
Cav3PN4= rawdata[c(4, 8, 12, 1, 5, 9)]
# Filtering and Normalization
# compute the effective library size by using TMM normalization
#Analysis for Cavin1
exp_designCav1 = data.frame(row.names = colnames(Cav1PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav1$condition, "Test")
levels(exp_designCav1)
head(exp_designCav1)
ddsCav1=DESeqDataSetFromMatrix(countData=Cav1PN4, colData=exp_designCav1, design=~condition)
ddsCav1=DESeq(ddsCav1)
resCav1= results(ddsCav1, alpha=0.05)
#for Cavin 2
exp_designCav2 = data.frame(row.names = colnames(Cav2PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav2$condition, "Test")
levels(exp_designCav2)
head(exp_designCav2)
ddsCav2=DESeqDataSetFromMatrix(countData=Cav2PN4, colData=exp_designCav2, design=~condition)
ddsCav2=DESeq(ddsCav2)
resCav2= results(ddsCav2, alpha=0.05)
#For Cavin3
exp_designCav3 = data.frame(row.names = colnames(Cav3PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav3$condition, "Test")
levels(exp_designCav3)
head(exp_designCav3)
ddsCav3=DESeqDataSetFromMatrix(countData=Cav3PN4, colData=exp_designCav3, design=~condition)
ddsCav3=DESeq(ddsCav3)
resCav3= results(ddsCav3, alpha=0.05)
#comparing the increase between cavins.
a<- resCav1$log2FoldChange
a1 = which(a>0)
aSig= rownames(rawdata)[which(resCav1$pvalue<0.05)]
aPADJ= rownames(rawdata)[which(resCav1$padj<0.1)]
a<-rownames(rawdata)[a1]
b<- resCav2$log2FoldChange
b1 = which(b>0)
b<-rownames(rawdata)[b1]
bSig= rownames(rawdata)[which(resCav2$pvalue<0.05)]
bPADJ<- rownames(rawdata)[which(resCav2$padj<0.1)]
c<- resCav3$log2FoldChange
c1 = which(c>0)
c<-rownames(rawdata)[c1]
cSig= rownames(rawdata)[which(resCav3$pvalue<0.05)]
cPADJ<- rownames(rawdata)[which(resCav3$padj<0.1)]
Upregshared<- unique(c[c%in%a[a%in%b]])
bPADJ
cPADJ
write.csv(resCav1[aPADJ, ], "Cavin1PC3PelletPADJ.csv")
write.csv(resCav2[bPADJ, ], "Cavin2PC3PelletPADJ.csv")
write.csv(resCav3[cPADJ, ], "Cavin3PC3PelletPADJ.csv")
HEKdata<- read.csv("miRNA_raw_counts_HEK_filtered.csv", header= TRUE, row.names=1)
keep<- rowSums(HEKdata>10) >=2
y<- HEKdata[keep, ]
write.csv(y, "miRNA_rc_HEK_filteredTake2.csv")
rawdata<- read.csv(file="miRNA_raw_counts_PC3_filtered.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(3,7, 11, 1, 5, 9)]
Cav1PN4= rawdata[c(2, 6, 10, 1, 5, 9)]
#CaveolinPN4= rawdata[c(3, 8, 13, 1, 5, 14)]
Cav3PN4= rawdata[c(4, 8, 12, 1, 5, 9)]
GFP= rawdata[c(1, 5, 9)]
rd<- read.csv(file="miRNA_raw_counts_HEK_filtered.csv", header= TRUE, row.names=1)
CaveolinPN4= rd[c(3, 8, 13)]
CaveGFP<- cbind(CaveolinPN4, GFP)
exp_design = data.frame(row.names = colnames(CaveGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
ddsCav=DESeqDataSetFromMatrix(countData=CaveGFP, colData=exp_design, design=~condition)
ddsCav=DESeq(ddsCav)
resCav= results(ddsCav, alpha=0.05)
Reg<- resCav$log2FoldChange
a1 = which(Reg>0)
aSig= rownames(CaveGFP)[which(resCav$pvalue<0.05)]
aPADJ= rownames(CaveGFP)[which(resCav$padj<0.1)]
aPADJ
View(CaveGFP)
View(CaveGFP)
View(CaveolinPN4)
View(CaveolinPN4)
View(rd)
View(rd)
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
library(topGO)
sum(topDiffGenes(aPADJ))
??ropDiffGenes
??topDiffGenes
result<- runTest(aPADJ, algorithm= "classic", statistic= "fisher")
??digest
write.csv(resCav[, aPADJ], "CaveolinHEKtoPC3GFP.csv")
write.csv(resCav[aPADJ, ], "CaveolinHEKtoPC3GFP.csv")
View(rd)
View(rd)
View(rd)
HekGFP<- rd[4, 9, 14]
HekGFP<- rd[c(4, 9, 14)]
View(HekGFP)
View(HekGFP)
View(rawdata)
View(rawdata)
Cav1PC3<- rawdata[c(2, 6, 10)]
Cav2PC3<- rawdata[c(3, 7, 11)]
Cav3PC3<- rawdata[c(4, 8, 12)]
HGFPpCav1<- cbind(Cav1PC3, HekGFP)
1+4
library(DESeq2)
HekGFP<- rd[c(4, 9, 14)]
Cav1PC3<- rawdata[c(2, 6, 10)]
HGFPpCav1<- cbind(Cav1PC3, HekGFP)
View(HGFPpCav1)
View(HGFPpCav1)
HGFPpCav1<- cbind(Cav1PC3, HekGFP)
exp_design = data.frame(row.names = colnames(HGFPpCav1),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=HGFPpCav1, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(HGFPpCav1)[which.(res$padj)<0.1]
PADJ<- rownames(HGFPpCav1)[which(res$padj)<0.1]
PADJ<- rownames(HGFPpCav1)[which(res$padj<0.1)]
length(PADJ)
dim(HGFPpCav1)
dim(Cav1PN4)
rawdata<- read.csv(file="miRNA_rc_PC3_filteredTake2.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(3,7, 11, 1, 5, 9)]
rawdata <- read.csv("miRNA_raw_counts_HEK_filtered.csv", header= TRUE, row.names=1)
Cav2PN4= rawdata[c(1, 6, 11 ,4, 9, 14)]
Cav1PN4= rawdata[c(2, 7, 12, 4, 9, 14)]
#CaveolinPN4= rawdata[c(3, 8, 13, 1, 5, 14)]
Cav3PN4= rawdata[c(5, 10, 15, 4, 9, 14)]
# Filtering and Normalization
# compute the effective library size by using TMM normalization
#Analysis for Cavin1
exp_designCav1 = data.frame(row.names = colnames(Cav1PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav1$condition, "Test")
levels(exp_designCav1)
head(exp_designCav1)
ddsCav1=DESeqDataSetFromMatrix(countData=Cav1PN4, colData=exp_designCav1, design=~condition)
ddsCav1=DESeq(ddsCav1)
resCav1= results(ddsCav1, alpha=0.05)
#for Cavin 2
exp_designCav2 = data.frame(row.names = colnames(Cav2PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav2$condition, "Test")
levels(exp_designCav2)
head(exp_designCav2)
ddsCav2=DESeqDataSetFromMatrix(countData=Cav2PN4, colData=exp_designCav2, design=~condition)
ddsCav2=DESeq(ddsCav2)
resCav2= results(ddsCav2, alpha=0.05)
#For Cavin3
exp_designCav3 = data.frame(row.names = colnames(Cav3PN4),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_designCav3$condition, "Test")
levels(exp_designCav3)
head(exp_designCav3)
ddsCav3=DESeqDataSetFromMatrix(countData=Cav3PN4, colData=exp_designCav3, design=~condition)
ddsCav3=DESeq(ddsCav3)
resCav3= results(ddsCav3, alpha=0.05)
#comparing the increase between cavins.
a<- resCav1$log2FoldChange
a1 = which(a>0)
aPADJ<- rownames(rawdata)[which(resCav1$padj<0.1)]
aSig= rownames(rawdata)[which(resCav1$pvalue<0.05)]
a<-rownames(rawdata)[a1]
b<- resCav2$log2FoldChange
b1 = which(b>0)
bPADJ<- rownames(rawdata)[which(resCav2$padj<0.1)]
b<-rownames(rawdata)[b1]
bSig= rownames(rawdata)[which(resCav2$pvalue<0.05)]
c<- resCav3$log2FoldChange
c1 = which(c>0)
c<-rownames(rawdata)[c1]
cPADJ<- rownames(rawdata)[which(resCav3$padj<0.1)]
cSig= rownames(rawdata)[which(resCav3$pvalue<0.05)]
Upregshared<- unique(c[c%in%a[a%in%b]])
Sig0.05<- unique(cSig[cSig%in%aSig[aSig%in%bSig]])
Sig0.05Upreg<- unique(Upregshared[Upregshared%in%Sig0.05])
aPADJ
bPADJ
cPADJ
resCav1$pval
resCav1[1:4]
resCav1[order(resCav1$pval)]
resCav1=order(resCav1$pval)
head(resCav1)
Order<-resCav1[order(resCav1$pval)]
GFPPC3<- rawdata[c(1, 5, 9)]
Cav1PC3<- rawdata[c(2, 6, 10)]
Cav2PC3<- rawdata[c(3, 7, 11)]
Cav3PC3<- rawdata[c(4, 8, 12)]
HEKCav1<- rd[c(2, 7, 12)]
HEKCav2<- rd[c(1, 6, 11)]
HekCav3<- rd[c(5, 10, 15)]
HEKCaveolin<- rd[c(3, 8, 13)]
TestGFP<- cbind(HEKCav1, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
head(PADJ)
TestGFP<- cbind(Cav1PC3, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
PADJ
View(TestGFP)
TestGFP<- cbind(Cav1PC3, GFPPC3)
View(TestGFP)
View(TestGFP)
rawdata<- read.csv(file="miRNA_raw_counts_PC3_filtered.csv", header= TRUE, row.names=1)
GFPPC3<- rawdata[c(1, 5, 9)]
Cav1PC3<- rawdata[c(2, 6, 10)]
Cav2PC3<- rawdata[c(3, 7, 11)]
Cav3PC3<- rawdata[c(4, 8, 12)]
HEKCav1<- rd[c(2, 7, 12)]
HEKCav2<- rd[c(1, 6, 11)]
HekCav3<- rd[c(5, 10, 15)]
HEKCaveolin<- rd[c(3, 8, 13)]
TestGFP<- cbind(Cav1PC3, GFPPC3)
View(TestGFP)
View(TestGFP)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
PADJ
TestGFP<- cbind(HEKCav1, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
PADJ
UpregNo<- which(res$log2FoldChange>0)
UpregNo<- which((res$log2FoldChange)>0)
length(UpregNo)
PADJ
length(PADJ)
length(UpregNo)
View(TestGFP)
View(TestGFP)
GFPPC3<- rawdata[c(1, 5, 9)]
Cav1PC3<- rawdata[c(2, 6, 10)]
Cav2PC3<- rawdata[c(3, 7, 11)]
Cav3PC3<- rawdata[c(4, 8, 12)]
HEKCav1<- rd[c(2, 7, 12)]
HEKCav2<- rd[c(1, 6, 11)]
HekCav3<- rd[c(5, 10, 15)]
HEKCaveolin<- rd[c(3, 8, 13)]
TestGFP<- cbind(HEKCav2, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
UpregNo<- which((res$log2FoldChange)>0)
PADJ
length(PADJ)
write.csv(res[PADJ, ], "HEKC2vsPC3GFP.csv")
TestGFP<- cbind(HEKCav1, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
UpregNo<- which((res$log2FoldChange)>0)
write.csv(res[PADJ, ], "HEKC1vsPC3GFP.csv")
PADJ
TestGFP<- cbind(HEKCav3, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
UpregNo<- which((res$log2FoldChange)>0)
write.csv(res[PADJ, ], "HEKC3vsPC3GFP.csv")
TestGFP<- cbind(HEKCaveolin, GFPPC3)
exp_design = data.frame(row.names = colnames(TestGFP),
condition =c("Test", "Test", "Test", "Cont", "Cont", "Cont"),
libType = c("paired-end", "paired-end", "paired-end", "paired-end", "paired-end", "paired-end"))
condition= relevel(exp_design$condition, "Cont")
levels(exp_design)
head(exp_design)
dds=DESeqDataSetFromMatrix(countData=TestGFP, colData=exp_design, design=~condition)
dds=DESeq(dds)
res= results(dds, alpha=0.05)
PADJ<- rownames(TestGFP)[which(res$padj<0.1)]
UpregNo<- which((res$log2FoldChange)>0)
write.csv(res[PADJ, ], "HEKCavevsPC3GFP.csv")
